create a class called gameboard
    create gameboard variable globally 
    create an array for the attackCoords
    create a ships object that contains a property for the ships on the board "shipsAfloat"



constructor{ 
    set the constructors as containerId 
    create a html div element called container 
    set the boards container to document containerId
    set the board's board to an empty array 
    call the create board function 
    create row and column properties 
}

createBoard() { 
    in a foor loop. increment the row variable until you reach 8
        for each loop create a empty row by assign the boards[row] to an empty array
        in a for loop increments the columns up to 8 
            for each loop create a board space thats assign to var "space"
            create css for the board space and .add it to the classlist
            assign id to each space 
            the space to the container 
            assign the board's row/column to the space 
            fill each space with "-" to set a neutral state 
}

validLocation(position) { 
    create boardLimit and assign it to 8 
    create an object that takes in x ,y variables assign poistion to it
    check if x is greater than or equal to 0 and if x is less than board limit 
    check if y is greater than or equal to 0 and if y is less than board limit 
        if true, return true
    else if false return false 
}

isCellValid(x , y) { 
    check if x is greater than or equal to 0 and if x is less than the length of rows &&
    check if y is greater than or equal to 0 and if y is less than the length of columns
    if true return true, if false return false 

}

getCoords(input) { 
    check if the input type is not a string throw error
    split the coordinates into a variable called "coords" 
    check if the length of coords equal 2 
        if false then throw a error for the valid format 

    parseInt both numbers and trim the white space with a radix of 10 

    check if both numbers are integers if not then throw errors 
    return both numbers in an array
}

getCell(x , y ) { 
    if these coordinates are not valid then return null 
    if true then return these coords with the gameboard ex. "gameboard[x][y]"
}

placeShip(coords, ship) { 
    check if # of coords is equal to ship's length if false
         return false 
    if coords overflow then
         return false 
    if coords are not free then 
        return false 

    for each coordinate 
        split coords into x and y 
        set gameboard's x and y to ship 
    
    increase the shipsAfloat property by 1 
    call the blockedCell function to find the blocked cells around the ship 
    
    IN the ships object 
        create a new entrty with ship's Id as the key 
        set value of new entry to an object holding: 
            properties:
                blockedcells - list of surrounding blocked cells
                shipCoordss - list of ship;s coords 
                
    return list of ship coords and blockedCells 
}

recieveAttack(input) { 
    check if the input coords are valid if false return (making sure input coordinates are valid)
    split the coordinates into a variable called "coords" (collecting the inputs and seperating from punctuations)
    check if the coords return a valid cell, if false then return function (checking if the coordinate is a valid space)
    check if the coords are in the attackCoords array if true then return (checking if the coords have already been hit)
    create a variable cell that is retrieving the coordinates using x & y . (retrieves cell contents: the ship object)
    add coordinates to the attackCoords array; (adds the cell to the attackcoords array making it not hittable anymore)
    check if the coordinates have already been attacked 
        mark the ship if it has been hit 
        assign the ship to the cell and hit the ship 
            if ship has been sunk 
                remove one ship from the board and make the cell content "X"
                // add a identifier property to the ship class and a shipDamage property 
                assign the ship's blockedCells using it's identifier to a shipsDamage variable 
                push the blockedCells into the attackCoords variable 
                return the ship with the status now as sunk and damage is assigned to shipsDamage 
        ship has been hit but not sunk. 
        mark the cell as "X"
        return status as hit and damage is assigned to shipsDamage 
    ship has not been hit. return the status as miss and damage as null
    
}



isAttackMarker(cell) {
    create a variable that 
}


