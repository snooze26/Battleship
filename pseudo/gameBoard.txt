create a class called battleField
    create battleField variable globally 
    create an array for the attackCoords
    create a ships object that contains a property for the ships on the board "shipsAfloat"


DONEDONEDONEDONEDONEDONEDONEDONEDONE
constructor(row , col){ 
    set row and col to the inputed values 
    run the createBattleField on row and col properties with bField
}
********************

DONEDONEDONEDONEDONEDONEDONEDONEDONE
createBattleField(rows, col) { 
    return
        create a empty array of arrays named with the row value
            make array mappable by spreading these elements
            map through the rows and enter an array of columns 
            fill these columns with "-" as the placeholder for the board 
}
********************

validLocation(position) { 
    create boardLimit and assign it to 8 
    create an object that takes in x ,y variables assign poistion to it
    check if x is greater than or equal to 0 and if x is less than board limit 
    check if y is greater than or equal to 0 and if y is less than board limit 
        if true, return true
    else if false return false 
}

** done 


getCell(input) { DONE **********
    check if the input type is not a string throw error
    split the coordinates into a variable called "coords" 
    check if the length of coords equal 2 
        if false then throw a error for the valid format 

    parseInt both numbers and trim the white space with a radix of 10 

    check if both numbers are integers if not then throw errors 
    return both numbers in an array
}

placeShip(coords, ship) { 
    check if # of coords is equal to ship's length if false
         return false 
    if coords overflow then
         return false 
    if coords are not free then 
        return false 

    for each coordinate 
        split coords into x and y 
        set battleField's x and y to ship 
    
    increase the shipsAfloat property by 1 
    call the blockedCell function to find the blocked cells around the ship 
    
    IN the ships object 
        create a new entrty with ship's Id as the key 
        set value of new entry to an object holding: 
            properties:
                blockedcells - list of surrounding blocked cells
                shipCoords - list of ship's coords 

    return list of ship coords and blockedCells 
}

recieveAttack(input) { 
    Define surroundingCells as an array of 8 direction pairs 
    check if coords are a string 
    if true then split coords by the "-" to get x an y values
        convert x and y to numbers 
    else 
        assign x to the 1st element in coords and y to the second 
    create an empty array called ValidSurroundingCoords 
    for each dx/dy of surroundingCells 
        newX is x + dx 
        newY is y + dy 
    if the location is valid for [newX , newY] 
        add newX and newY to ValidSurroundingCoords
    return ValidSurroundingCoords
    
}

isAttackMarker(cell) {
    create a variable that 
}

allShipsSunk() { DONE********
    return shipAfloat equal to 0 
}

clearBoard() { DONE
    reassign battleField to a new battleField using the createBoard function with the # of rows and cols
    set attackCoords to an empty array 
    reset the ships object shipAfloat proeprty to 0 
}

getbattleField() { DONE 
    return the battleField 
 }

howManyShips() { DONEEEEEE
    return shipsAfloat
}

retrieveSurroundingCells(coords) { 
    define the 8 directions around a cell using shipsDirections
    create a array called shipMoves and assign it to empty array

    for each offset(x and y) in shipsDirections
        for each coord in coordinates 
        split coord into x and y parts 
        convert x and y to numbers 

        calculate newX = x + offset of x 
        newY = x + offset of y 

        if newX/newY are not valid cells 
            skip to next coord
        if the cell at newX/Y is not "X" or "-"
            skip to next coord 
        
        Add newX/Y as a string to shipMoves 
    
    define newShipMoves to remove duplicate coords from shipMoves

    return newShipMoves
}

surroundShipWithBlockedCells(shipCoords) { 
    define surroundingCells by calling retrieveSurroundingCells with shipCoords as its input 
    create an empty array called acc for the accumlator 
    for each coord in surroundingCells 
        split coord into x and y 
        convert x and y into numbers 
        Set the cell at x and y on the battleField to "X" marking it as blocked 
        add coord to acc array 
    return acc (all blocked cell coords)
}

isCoordsFree(coords) { DONE 
    define freeCoords by calling filter on coords 
        filter criteria:
            for each coordinate 
                split the the coords 
                assign x and y to the split coords 
                define cell by calling retrieveCell with x and y as the inputed values 
                if cell's value is "-" and not "X" add the coord to freeCoords
        return true if freeCoords.length is equal to coords.length         
}

isCoordsFreeAndValid(coords){ DONE
    return 
        for every coord in coords 
            assign an array containng x and y to coord split
             convert each string to a number
            return whether [x , y] is valid and bField [x][y] is strictly equal to '-'
}





