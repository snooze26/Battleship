getGameBoard(boardId) { DONE 
    const board = boardId from DOM 
    return board 
}

function createBoard (boardId) { DONE 
    const board is the playerBoard from html. using boardId as input 
    create a 10 x 10 grid 
        loop through a loop up until 10 
            loop isnide of this loop  up until 10 
                create a div element named cell 
                add the CSS design to the cell. 
                capture the x and y data 
                add the cell to the board 
}

setupCellClick(boardId , callback) { DONE 
    retrieve the board 

    retrieve all cells in given board 
    
    attach an event listener to each cell     

    get data-x and data-y 
        loop through each cell forEach()
            when the cell is clicked 
                const x/y = parseInt cell data set x/y

            (prevent re-clicking)
            if the cell's classlist contains "clicked" then return; 

            (mark cell as used)
            add clicked to the cell's classlist 

            (use callback to make function dynamic)
            pass x , y, and cell in to the callback function 
            
    prevent re-clicking the same cell
        if the claslist contains clicked then return
        add "clicked" to the cell's classlist 
    
    make the input values for the callback x , y , and cell 

    disable clicks during opponenets turn or when game ends (COMEBACK TO THIS ONE) 
}


renderHitMiss(cell, isHit){ 
    if isHit is true 
        add the hit classlist to cell 
        add "H" to the cell's text content 
    else 
        add the miss classlist to cell    
        add "M" to the cell's text content 
}

showMessage(message) { DONE 
    messageBox = "messageBox" from html
    messageText = "messageText" from html 

    if (messageBox && messageText){

         messagetext = message 
         messageBox display style = flex 
         add "visible" to classList 

         set message to dissapear after 3 seconds 
            add hideMessage to classlist 
            set messageText display style to none 
        }
}

renderShips(boardId, ship) { 
    retrieve shipCoords and the player's board 
    coords = shipsCoords
    board = player's board

    for each x,y in coords 
        get the corresponding cell in board using data-x and data-y 

        if cell is true 
            Add the general ship classlist to the cell 
            add the specifc class based on the ship type 
            store the metadata of the ship 
}

toggleTurnIndicator(currentPlayerName) { 

}

resetBoard(boardId) { 

}

initUi(boardId1 , boardId2) { 

}

showShipOverlay(coords) { 

}

disableBoard(boardId) { 

}

updateScore(winner , loser) { 

}